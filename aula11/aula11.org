#+OPTIONS: num:nil toc:nil
#+OPTIONS: date:nil reveal_mathjax:t
#+OPTIONS: tex t
#+OPTIONS: timestamp:nil
#+OPTIONS: org-confirm-babel-evaluate nil
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:///home/rodrigo/reveal.js

#+Title: Parsing Expression Grammars
#+Author: Construção de compiladores I


* Objetivos

** Objetivos

- Apresentar o formalismo de Parsing Expression Grammars (PEGs).

- Apresentar a sintaxe, semântica e boa-formação de PEGs.

** Objetivos

- Apresentar um sistema de tipos para PEGs.

- Apresentar uma implementação de PEGs em Haskell.

* Introdução

** Introdução

- Gramáticas livres de contexto são o *padrão* para especificar linguagens.

- Problemas: *ambiguidade*

** Introdução

- Apesar de existirem artifícios para eliminar problemas de ambiguidade, no geral este é um problema *indecidível*.

** Introdução

- GLCs são um formalismo *gerativo*, isto é, gramáticas geram palavras.

- Usamos GLCs para especificar *reconhecedores*.

** Introdução

- Essa diferença parece mínima mas é fundamental!

** Introdução

- Para entender a diferença, vamos considerar a linguagem de palavras com uma quantidade par de zeros.

** Introdução

- Especificação baseada em geração.
  - Palavras são construídas acrescentando um número finito de 00.

$\{s \in 0^{*}\,|\, \exists n \in \mathbb{N}. s = (00)^n\}$

** Introdução

- Especificação baseada em reconhecimento
  - Palavras são aceitas se tem tamanho par.

$\{s \in 0^{*}\,|\,|s|\mathtt{ mod } 2 = 0\}$


** Introdução

- Uma alternativa recente são as chamadas Parsing Expression Grammars (PEGs).

- Permitem a especificação de *reconhecedores*.

** Introdução

- Vantagem: não temos mais o problema de ambiguidade.

- Expressividade: PEGs podem expressar linguagens sensíveis ao contexto.

* Parsing Expression Grammars

** Parsing Expression Grammars

- Uma PEG G = (V, \Sigma, R, e) é tal que:
  - V: conjunto de não terminais da gramática.
  - \Sigma: alfabeto.
  - R: função total que associa uma /parsing expression/ a cada não terminal.
  - e: expressão inicial da gramática.

** Parsing Expression Grammars

- Sintaxe de expressões

\begin{array}{lcl}
e & \to  & \lambda\,|\, a \in \Sigma \,|\, A \in V\\
  & \mid & e\:e\,|\,e\,/\, e\,|\,e^{*}\,|\,!\,e\\
\end{array}

** Parsing Expression Grammars

- Qual o significado de uma parsing expression?

- Definido em termos de uma relação $\Rightarrow_{G}$, em que $G = (V,\Sigma, R, e)$.

** Parsing Expression Grammars

- Relação $(e,s) \Rightarrow (s_p, s_s)$ denota:
  - Expressão $e$ processa o prefixo $s_p$ de $s$, deixando o sufixo $s_s$.
  - Caso exista um erro de parsing, utilizamos o símbolo $\bot$.

** Parsing Expression Grammars

- Regra para $e = \lambda$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image1.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \infer{(\lambda,s)\Rightarrow_{G} (\lambda, s)}{}
  \]
#+END_SRC

[[./imgs/image1.png]]



** Parsing Expression Grammars

- Regras para $e = a$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image2.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \begin{array}{ccc}
      \infer{(a,as)\Rightarrow_{G} (a, s)}{} &
      \infer{(b,as)\Rightarrow_{G} \bot}{a \neq b} &
      \infer{(a,\lambda)\Rightarrow_{G} \bot}{} \\
    \end{array}
  \]
#+END_SRC

[[./imgs/image2.png]]


** Parsing Expression Grammars

- Regras para $e = A$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image3.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \begin{array}{c}
      \infer{(A,s)\Rightarrow_{G} r}
            {A \leftarrow e \in R &
             (e,s)\Rightarrow_{G} r}
    \end{array}
  \]
#+END_SRC

[[./imgs/image3.png]]


** Parsing Expression Grammars

- Regras para $e = e_1\:e_2$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image4.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \begin{array}{c}
      \infer{(e_1\:e_2,s)\Rightarrow_{G} (s_{p1}\,s_{p2}, s_s)}
            {(e_1,s)\Rightarrow_{G} (s_{p1}, s_f) &
             (e_2,s_f) \Rightarrow_{G} (s_{p2}, s_s)}
      \\ \\
      \infer{(e_1\:e_2,s)\Rightarrow_{G} \bot}
            {(e_1,s)\Rightarrow_{G} (s_{p1}, s_f) &
             (e_2,s_f) \Rightarrow_{G} \bot}
      \\ \\
      \infer{(e_1\:e_2,s)\Rightarrow_{G} (s_{p1}\,s_{p2}, s_s)}
            {(e_1,s)\Rightarrow_{G} \bot}
    \end{array}
  \]
#+END_SRC

[[./imgs/image4.png]]


** Parsing Expression Grammars

- Regras para $e = e_1\,/\,e_2$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image5.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \begin{array}{cc}
      \infer{(e_1\,/\,e_2,s)\Rightarrow_{G} (s_{p}, s_s)}
            {(e_1,s)\Rightarrow_{G} (s_{p}, s_s) }
      &
      \infer{(e_1\,/\,e_2,s)\Rightarrow_{G} r}
            {(e_1,s)\Rightarrow_{G} \bot &
             (e_2,s) \Rightarrow_{G} r}
    \end{array}
  \]
#+END_SRC

[[./imgs/image5.png]]


** Parsing Expression Grammars

- Regras para $e = e_1^{*}$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image6.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \begin{array}{cc}
      \infer{(e_1^{*},s)\Rightarrow_{G} (s_{p1}\,s_{p2}, s_s)}
            {(e_1,s)\Rightarrow_{G} (s_{p1}, s_f) &
             (e_1^{*}, s_f) \Rightarrow_{G} (s_{p2}, s_s)}
      &
      \infer{(e_1^{*},s)\Rightarrow_{G} (\lambda, s)}
            {(e_1,s)\Rightarrow_{G} \bot}
    \end{array}
  \]
#+END_SRC

[[./imgs/image6.png]]


** Parsing Expression Grammars

- Regras para $e = !\,e_1$


#+HEADER: :imagemagick yes
#+HEADER: :results silent :file ./imgs/image7.png
#+HEADER: :headers '("\\usepackage{proof}")
#+HEADER: :fit yes :imoutoptions -geometry 1500 :iminoptions -density 1500
#+BEGIN_SRC latex
  \[ \LARGE
    \begin{array}{cc}
      \infer{(!\,e_1,s)\Rightarrow_{G} \bot}
            {(e_1,s)\Rightarrow_{G} (s_{p}, s_s)}
      &
      \infer{(!\,e_1,s)\Rightarrow_{G} (\lambda, s)}
            {(e_1,s)\Rightarrow_{G} \bot}
    \end{array}
  \]
#+END_SRC

[[./imgs/image7.png]]

** Parsing Expression Grammars

- Exemplo

\begin{array}{lcl}
A & \leftarrow & a A b \,/\, ab\\
\end{array}

- Expressão inicial: $A /\:!\, (a\, /\, b)\: /\: \lambda$

- Exemplos da semântica: aabb, a, \lambda

** Parsing Expression Grammars

- Qual o problema com a seguinte gramática?
  - Expressão inicial: A

\begin{array}{lcl}
A & \leftarrow & A a\,/\,a
\end{array}


** Parsing Expression Grammars

- Qual o problema com a seguinte expressão?
  - $(a^*)^*$

** Parsing Expression Grammars

- Assim como programas em geral, PEGs podem entrar em *loop*.

- Basicamente, PEGs são especificações de parsers descendentes recursivos.


* Terminação em PEGs

** Terminação em PEGs

- Dizemos que uma expressão $e$ sucede com uma string $s$ se:
  - $\exists s_p\,s_s . (e,s)\Rightarrow_{G} (s_p,s_s)$

** Terminação em PEGs

- Relação $e \rightharpoonup o$, $o\in\{0,1,f\}$.
  - Caso $s_p = \lambda$, temos que $e \rightharpoonup 0$.
  - Caso $s_p = ay$, temos que $e \rightharpoonup 1$.
  - Em caso de falha, temos que $e\rightharpoonup f$.

** Terminação em PEGs

- Dizemos que uma expressão é bem formada se:
  - Não possui recursão à esquerda direta / indireta.
  - Não é da forma $e^*$, em que $e\rightharpoonup 0$.

** Terminação em PEGs

- Uma PEG é *bem formada* se todas as suas subexpressões são bem formadas.

** Terminação em PEGs

- Definição original de boa formação é feita em dois passos:
  - Primeiro, define-se quando uma expressão é bem formada.
  - Depois, computa-se o ponto fixo do conjunto de expressões bem formadas de uma gramática.

** Terminação em PEGs

- Problemas
  - Definição não composicional
  - Difícil compreensão.

- Solução: Uso de tipos.
  - Falaremos sobre isso quando estudarmos análise semântica.

* Implementação

** Implementação

- Vamos apresentar uma implementação de PEGs usando combinadores.

- Note que nossa implementação não irá garantir a terminação!
  - Problema de pesquisa em aberto!

** Implementação

- Representando o resultado de uma expressão

#+BEGIN_SRC haskell
data Result s a
  = Pure a           -- did not consume anything. We can backtrack.
  | Commit s a       -- remaining input and result.
  | Fail String Bool -- true if consume any input
  deriving (Show, Functor)
#+END_SRC

** Implementação

- Definindo uma expressão.

#+BEGIN_SRC haskell
newtype PExp s a
  = PExp {
      runPExp :: s -> Result s a
    } deriving Functor
#+END_SRC


** Implementação

- Representando a entrada

#+BEGIN_SRC haskell
class Stream a where
  anyChar :: PExp a Char

instance Stream String where
  anyChar = PExp $ \ d ->
    case d of
      (x : xs) -> Commit xs x
      []       -> Fail "eof" False
#+END_SRC

** Implementação

- Expressões são applicatives

#+BEGIN_SRC haskell
instance Applicative (PExp s) where
  pure x = PExp $ \ _ -> Pure x
  (PExp efun) <*> (PExp earg)
    = PExp $ \ d ->
        case efun d of
          Pure f   -> f <$> earg d
          Fail s c -> Fail s c
          Commit d' f ->
            case earg d' of
              Pure a -> Commit d' (f a)
              Fail s' _ -> Fail s' True
              Commit d'' a -> Commit d'' (f a)
#+END_SRC

** Implementação

- Expressões são alternatives

#+BEGIN_SRC haskell
instance Alternative (PExp d) where
  (PExp e1) <|> (PExp e2) = PExp $ \ d ->
    case e1 d of
      Fail _ False -> e2 d
      x            -> x
  empty = PExp $ \ _ -> Fail "empty" False
#+END_SRC

** Implementação

- Controlando backtracking

#+BEGIN_SRC haskell
try :: PExp d a -> PExp d a
try (PExp m) = PExp $ \ d ->
  case m d of
    Fail s _ -> Fail s False
    x        -> x
#+END_SRC

** Implementação

- Escolha ordenada

#+BEGIN_SRC haskell
(</>) :: PExp d a -> PExp d a -> PExp d a
e1 </> e2 = try e1 <|> e2
#+END_SRC

** Implementação

- Símbolos e \lambda

#+BEGIN_SRC haskell
satisfy :: Stream d => (Char -> Bool) -> PExp d Char
satisfy p = do
  x <- anyChar
  x <$ guard (p x)

symbol :: Stream d => Char -> PExp d Char
symbol c = satisfy (c ==)

lambda :: Stream d => a -> PExp d a
lambda v = PExp $ \ d -> Commit d v
#+END_SRC

** Implementação

- Operador star

#+BEGIN_SRC haskell
star :: Stream d => PExp d a -> PExp d [a]
star e1 = PExp $ \ d ->
  case runPExp e1 d of
    Fail _ _ -> Commit d []
    Pure _ -> Fail "Nullable star" False
    Commit d' v ->
      case runPExp (star e1) d' of
        Fail _ _ -> Commit d []
        Commit d'' vs -> Commit d'' (v : vs)
        Pure _ -> Fail "Nullable star" False
#+END_SRC

** Implementação

- Operador not

#+BEGIN_SRC haskell
not :: Stream d => PExp d a -> PExp d ()
not e = PExp $ \ d ->
  case runPExp e d of
    Fail _ _ -> Pure ()
    _        -> Fail "not" True

and :: Stream d => PExp d a -> PExp d ()
and e = not $ not e
#+END_SRC

** Implementação

- Exemplo: $\{a^nb^n | n \geq 1\}$

#+BEGIN_SRC haskell
ab1 :: PExp String String
ab1 = (f <$> symbol 'a' <*> ab <*> symbol 'b') </>
      (g <$> symbol 'a' <*> symbol 'b')
  where
    f x s y = x : s ++ [y]
    g x y = [x,y]
#+END_SRC

** Implementação

- Exemplo: $\{b^nc^n | n \geq 1\}$

#+BEGIN_SRC haskell
bc1 :: PExp String String
bc1 = (f <$> symbol 'b' <*> bc <*> symbol 'c') </>
      (g <$> symbol 'b' <*> symbol 'c')
  where
    f x s y = x : s ++ [y]
    g x y = [x,y]
#+END_SRC


** Implementação

- Exemplo $\{a^nb^nc^n | n \geq 1\}$

#+BEGIN_SRC haskell
abc1 :: PExp String String
abc1 = f <$> and (ab1 *> not b) <*>
             star a             <*>
             and b              <*>
             bc1                <*>
             not anyChar
  where
    a = symbol 'a'
    b = symbol 'b'
    f _ as _ bcs _ = as ++ bcs
#+END_SRC

* Concluindo

** Concluindo

- Nesta aula apresentamos uma alternativa às GLCs: PEGs

- Apresentamos a sintaxe e semântica de PEGs
  - Discutimos o problema de terminação.

** Concluindo

- Apresentamos uma implementação de PEGs em Haskell

- PEGs não são equivalentes a GLCs
  - Não existe PEG para palíndromos
  - Existe PEG para $\{a^nb^nc^n\,|\,n\geq 1\}$

** Concluindo

- Próxima aula: análise sintática ascendente.

* Exercícios

** Exercícios

- Usando a implementação apresentada, construa uma PEG para expressões aritméticas
  envolvendo números, variáveis, adição, multiplicação e parêntesis.
